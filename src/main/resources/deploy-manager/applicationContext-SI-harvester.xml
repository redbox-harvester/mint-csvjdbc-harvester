<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:int="http://www.springframework.org/schema/integration"
	xmlns:int-jms="http://www.springframework.org/schema/integration/jms" xmlns:int-jdbc="http://www.springframework.org/schema/integration/jdbc"
    xmlns:int-jmx="http://www.springframework.org/schema/integration/jmx" xmlns:int-file="http://www.springframework.org/schema/integration/file"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/integration
            http://www.springframework.org/schema/integration/spring-integration.xsd
            http://www.springframework.org/schema/integration/jms
            http://www.springframework.org/schema/integration/jms/spring-integration-jms.xsd 
            http://www.springframework.org/schema/integration/jdbc 
            http://www.springframework.org/schema/integration/jdbc/spring-integration-jdbc.xsd 
            http://www.springframework.org/schema/integration/jmx 
            http://www.springframework.org/schema/integration/jmx/spring-integration-jmx.xsd
            http://www.springframework.org/schema/integration/file
            http://www.springframework.org/schema/integration/file/spring-integration-file.xsd">
	<!-- Configuration file for harvesting from a DB table using JDBC. -->

	<int-jmx:mbean-export id="mbeanExporterMintCsvJdbc" default-domain="au.com.redboxresearchdata.harvester.client.mint.csvjdbc" server="mbeanServer" />
    
    <bean id="placeholderProperties" class="au.com.redboxresearchdata.util.config.ConfigSlurperPlaceholderConfigurer">
        <property name="environment" value="#{grailsApplication.config.get('environment')}" />
        <property name="defaultEnvironment" value="production" />
        <property name="config" value="#{grailsApplication.config.get('clientConfigObj')}" />
    </bean>
	<int:channel id="channel_filesIn" />
	<int-file:inbound-channel-adapter channel="channel_filesIn" id="channel_filesInAdapter" directory="${harvest.directory}" filter="compositeFilter">
		<int:poller id="poller" max-messages-per-poll="${harvest.queueCapacity}" fixed-delay="${harvest.pollRate}"/>
		<int-file:nio-locker/>
	</int-file:inbound-channel-adapter>

    <int:chain input-channel="channel_filesIn" output-channel="channel_tablesIn">
        <int:transformer ref="transformationHandler" method="handleFileHeaders" />
        <int:service-activator ref="csvjdbcBridge" method="addTable" />
    </int:chain>

	<!-- JDBC configuration -->
	<int-jdbc:inbound-channel-adapter query="SELECT * FROM table" channel="channel_tablesIn" data-source="dataSource">
		<int:poller trigger="csvjdbcBridge" />
	</int-jdbc:inbound-channel-adapter>

    <int:chain input-channel="channel_tablesIn" output-channel="channel_harvest">
		<int:header-enricher>
            <int:header name="harvestType" value="${harvest.type}" />
            <int:header name="type" method="getTable" ref="csvjdbcBridge" />
            <int:header name="is_valid" value="true" />
			<int:header name="original_file" method="getOriginalFile" ref="csvjdbcBridge" />
		</int:header-enricher>
		<int:service-activator ref="csvjdbcBridge" method="moveSourceFileUsingHarvestType" />
	</int:chain>

	<int:chain input-channel="channel_harvest" output-channel="channel_out">
		<int:transformer ref="transformationHandler" method="handleCsvJdbcUsingHarvestType"/>
	</int:chain>

	<int-jms:outbound-channel-adapter id="jmsOut" destination="requestQueue" channel="channel_out" />
    <int:channel id="channel_out">
        <int:interceptors>
            <ref bean="shutdowner" />
        </int:interceptors>
    </int:channel>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${harvest.csvjdbc.className}" />
        <property name="url" value="${harvest.csvjdbc.url}" />
    </bean>

    <bean id="csvjdbcBridge" class="au.com.redboxresearchdata.harvester.csvjdbc.CsvJdbcBridge">
        <constructor-arg value="${harvest.queueCapacity}" />
        <property name="channelInterceptor" ref="shutdowner" />
        <property name="config" value="#{placeholderProperties.config}" />
    </bean>

    <bean id="transformationHandler" class="au.com.redboxresearchdata.harvester.json.transformer.JsonTransformationHandler">
		<property name="config" value="#{placeholderProperties.config}" />
	</bean>

    <bean id="requestQueue" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg value="${activemq.queueName}" />
    </bean>
	<bean id="shutdowner" class="au.com.redboxresearchdata.util.integration.interceptor.TransmissionInterceptorAdapter">
		<property name="shouldCountPresending" value="false" />
		<property name="shutdownContext" value="false" />
	</bean>
	<bean id="connectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
		<property name="brokerURL" value="${activemq.url}" />
	</bean>
	<bean id="acceptAllFilter" class="org.springframework.integration.file.filters.AcceptAllFileListFilter"/>
	<bean id="simplePatternFilter" class="org.springframework.integration.file.filters.SimplePatternFileListFilter">
		<constructor-arg value="*.csv"/>	
	</bean>
	<bean id="compositeFilter" class="org.springframework.integration.file.filters.CompositeFileListFilter">
		<constructor-arg>
			<list>
				<ref bean="acceptAllFilter" />
				<ref bean="simplePatternFilter" />
			</list>
		</constructor-arg>	
	</bean>
</beans>
